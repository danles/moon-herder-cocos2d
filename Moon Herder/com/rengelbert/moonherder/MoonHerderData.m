////  MoonHerderData.m//  MoonHerder////  Created by Roger Engelbert on 10/9/12.//  Copyright Done With Computers 2012. All rights reserved.//	#import "MoonHerderData.h"// MoonHerderData implementation@implementation MoonHerderData- (void) dealloc {		[super dealloc];}-(id) initWithGame:(Game *) game {	self = [super init];	if(self != nil) {        float line_ratio = 1.0f;                if (game.screen_ratio == 2) {            line_ratio = 1.3;        }		//we start with base values for:		//- Line Power Decrement		//- Time Decrement		//- Boosts		//- Stars				/*		Each of these values are altered when a new level begins.		So lines cost more power, time runs faster, there are more stars, and more boosts		Updates in value are based on Level Number * ratio of increase for each value		*/		        _initialLineDecrement = 0.07 * line_ratio;		_lineDecrementRatio = 0.009 * line_ratio;				_initialStars = 3;		_starsRatio = 3;				_initialTimeDecrement = 0.09f * game.screen_ratio;		_timeDecrementRatio = 0.02f * game.screen_ratio;				_initialBoostNumber = -2;		_boostNumberIncrement = 1;                        //test code to clear stored data        //NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];        //[defaults setInteger:0 forKey:@"bestScore"];                        //load las best score       if (![[NSUserDefaults standardUserDefaults]integerForKey:@"bestScore"]){            _bestScore = 0;           NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];           [defaults setInteger:0 forKey:@"bestScore"];        } else {            _bestScore = [[NSUserDefaults standardUserDefaults]integerForKey:@"bestScore"];        }         		[self reset];	}		return self;}-(void) update {        //increase line decrement value, total stars, boosts, and time decrement        _lineDecrement = _initialLineDecrement + (_level-1) * _lineDecrementRatio;    _totalStars = _initialStars + (_level - 1) * _starsRatio;	    if (_totalStars > 450) {		_totalStars = 450;	}    if (_lineDecrement > 0.5f) _lineDecrement = 0.5f;	    _collectedStars = 0;    _timeDecrement = _initialTimeDecrement + (_level - 1) * _timeDecrementRatio;    _boostNumber = _initialBoostNumber + (_level - 1) *_boostNumberIncrement;    if (_boostNumber > 5) _boostNumber = 5;    }-(void) reset {    //reset to level 1 values (base values)    _level = 1;    _totalCollectedStars = 0;    _collectedStars = 0;	[self update];}//I created separate methods for integer and floats instead of boxing and unboxing //with NSNumber, so I can show you later how much easier it is with//C++ when you need to return Number values, by using Templates-(float) getFloatValue:(int)property {        switch (property) {        case LINE_DECREMENT:            return _lineDecrement;                    case TIME_DECREMENT:            return _timeDecrement;                }    return 0.0;}-(int) getValue:(int)property {           switch (property) {        case TOTAL_STARS:            return _totalStars;        case COLLECTED_STARS:            return _collectedStars;        case BOOSTS:            return _boostNumber;        case TOTAL_STARS_COLLECTED:            return _totalCollectedStars;        case BEST_SCORE:                       return _bestScore;    }    return 0;}-(void) setValue:(int)property withFloat:(float) value{    switch (property) {        case LINE_DECREMENT:            _lineDecrement = value;            break;        case TIME_DECREMENT:            _timeDecrement = value;            break;    }}-(void) setValue:(int) property withInt:(int) value{    switch (property) {        case TOTAL_STARS:            _totalStars = value;            break;        case COLLECTED_STARS:            _collectedStars = value;            break;        case BOOSTS:            _boostNumber = value;            break;        case TOTAL_STARS_COLLECTED:            _totalCollectedStars = value;            break;        case BEST_SCORE:            _bestScore = value;                        NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];            [defaults setInteger:_bestScore forKey:@"bestScore"];            [defaults synchronize];            break;    }}@end		