////  MoonHerderSounds.m//  MoonHerder////  Created by Roger Engelbert on 10/9/12.//  Copyright Done With Computers 2012. All rights reserved.//		#import "MoonHerderSounds.h"// MoonHerderSounds implementation@implementation MoonHerderSounds- (void) dealloc {		[super dealloc];}-(void) play:(int) type {    switch (type) {        case SOUND_BACKGROUND:             [_audioEngine playBackgroundMusic:@"bg.mp3"];            break;        case SOUND_LINE_HIT:            [_audioEngine playEffect:@"line_hit.wav"];            break;        case SOUND_WALL_HIT:            [_audioEngine playEffect:@"wall_hit.wav"];            break;        case SOUND_BOOST_HIT:            [_audioEngine playEffect:@"boost_hit.wav"];            break;        case SOUND_STAR_HIT:            [_audioEngine playEffect:@"star_hit.wav"];            break;        case SOUND_LAST_STAR_HIT:            [_audioEngine playEffect:@"last_star_hit.wav"];            break;        case SOUND_SUN_HIT:            [_audioEngine playEffect:@"sun_hit.wav"];            break;        case SOUND_GROUND_HIT:            [_audioEngine playEffect:@"ground_hit.wav"];            break;        case SOUND_SUN_RISE:            [_audioEngine playEffect:@"sun_rise.wav"];            break;        case SOUND_SUN_GROW:            [_audioEngine playEffect:@"sun_grow.wav"];            break;    }}//preload sound files-(void) loadSoundBuffers:(NSObject*) data {		//Wait for the audio manager if it is not initialised yet	while ([CDAudioManager sharedManagerState] != kAMStateInitialised) {		[NSThread sleepForTimeInterval:0.1];	}	    CDSoundEngine *sse = [CDAudioManager sharedManager].soundEngine;    _audioEngine = [SimpleAudioEngine sharedEngine];        NSMutableArray *loadRequests = [[[NSMutableArray alloc] init] autorelease];        [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_BOOST_HIT filePath:@"boost_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_LINE_HIT filePath:@"line_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_GROUND_HIT filePath:@"ground_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_LAST_STAR_HIT filePath:@"last_star_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_SUN_HIT filePath:@"sun_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_STAR_HIT filePath:@"star_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_WALL_HIT filePath:@"wall_hit.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_WALL_HIT filePath:@"sun_rise.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_WALL_HIT filePath:@"sun_grow.wav"] autorelease]];    [loadRequests addObject:[[[CDBufferLoadRequest alloc] init:SOUND_BACKGROUND filePath:@"bg.mp3"] autorelease]];        [sse loadBuffersAsynchronously:loadRequests];    _audioEngineState = kAudioStateSoundBuffersLoading;    }@end		