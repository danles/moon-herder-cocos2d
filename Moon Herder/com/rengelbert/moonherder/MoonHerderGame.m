////  MoonHerderGame.m//  MoonHerder////  Created by Roger Engelbert on 10/9/12.//  Copyright Done With Computers 2012. All rights reserved.//	#import "MoonHerderGame.h"#import "MoonHerderData.h"#import "MoonHerderImages.h"#import "MoonHerderSounds.h"#import "GameScreen.h"#import "IntroScreen.h"#import "HelpScreen.h"#import "Star.h"#import "Line.h"// MoonHerderGame implementation@implementation MoonHerderGame- (void) dealloc {	    [_starsPool release];    _starsPool = nil;        [_linesPool release];    _linesPool = nil;        [_numbersPool release];    _numbersPool = nil;    	[super dealloc];}-(id) initWithWidth:(int) width withHeight:(int) height {	self = [super initWithWidth:width withHeight:height];	if(self != nil) {				if (_screenWidth == 768) _screen_ratio = 2;		        //DISPLAY LOADING MESSAGE....        _bg = [CCSprite spriteWithFile:@"Default.png"];        _loading = [CCSprite spriteWithFile:@"loading.png"];                [_bg setPosition:ccp(_screenWidth * 0.5f, _screenHeight * 0.5f)];        [self addChild:_bg];                        [_loading setPosition:ccp(_screenWidth * 0.5f, _screenHeight * 0.2f)];        [self addChild:_loading];                //begin preloading of images and sounds        _preloaded = NO;                _gameData = [[[MoonHerderData alloc] initWithGame:self] retain];		_images = [[[MoonHerderImages alloc] initWithGame:self] retain];		_sounds = [[[MoonHerderSounds alloc] init] retain];				_gameData.gameMode = GAME_MODE_PAUSE;                //create object pools        _starsPool = [[NSMutableArray arrayWithCapacity:500] retain];        _linesPool = [[NSMutableArray arrayWithCapacity:15] retain];        _numbersPool = [[NSMutableArray arrayWithCapacity:50] retain];        _starsPoolIndex = 0;        _linesPoolIndex = 0;        _numbersPoolIndex = 0;                		[self createPools];		[self createScreens];                           [self scheduleUpdate];    	}		return self;}-(void) update:(ccTime)dt {        //if sounds are loaded    if (_sounds.audioEngineState == kAudioStateReady) {                //sounds are loaded, now check on images                if (_images.loaded) {            if (_preloaded == NO) {                //clear up loading screen, star game with Intro Screen                [self removeChild:_bg cleanup:YES];                [self removeChild:_loading cleanup:YES];                                _preloaded = YES;                //set the initial screen                //[self setScreenWithName:@"HelpScreen"];                //[self setScreenWithName:@"GameScreen"];                [self setScreenWithName:@"IntroScreen"];                _gameData.gameMode = GAME_MODE_PLAY;            } else {                if (_screen != nil) [_screen update:dt];            }                    }        //we can also get percentage of sounds loaded    } else if (_sounds.audioEngineState == kAudioStateSoundBuffersLoading) {                if ([CDAudioManager sharedManager].soundEngine.asynchLoadProgress >= 1.0f) {            //Sounds have finished loading            _sounds.audioEngineState = kAudioStateReady;        } else {            //PERCENTAGE            //[CDAudioManager sharedManager].soundEngine.asynchLoadProgress        }    }       }-(void) createScreens {	    [_screens setObject: [[[IntroScreen alloc] initWithGame:self] autorelease] forKey:@"IntroScreen"];	[_screens setObject: [[[GameScreen alloc] initWithGame:self] autorelease] forKey:@"GameScreen"];    [_screens setObject: [[[HelpScreen alloc] initWithGame:self] autorelease] forKey:@"HelpScreen"];	}-(void) createPools {	    int i;  	//create stars 	for (i = 0; i < 500; i++) {		[_starsPool addObject:[[Star alloc] initWithGame:self]];	}		//create lines 	for (i = 0; i < 15; i++) {		[_linesPool addObject:[[Line alloc] initWithGame:self]];	}	}-(id) getObjectFromPoolWithName:(int)name {    switch (name) {        case POOL_LINES:            _linesPoolIndex++;            if (_linesPoolIndex == _linesPool.count) _linesPoolIndex = 0;            return [_linesPool objectAtIndex:_linesPoolIndex];                case POOL_NUMBERS:            _numbersPoolIndex++;            if (_numbersPoolIndex == _numbersPool.count) _numbersPoolIndex = 0;            return [_numbersPool objectAtIndex:_numbersPoolIndex];                    case POOL_STARS:            _starsPoolIndex++;            if (_starsPoolIndex == _starsPool.count) _starsPoolIndex = 0;            return [_starsPool objectAtIndex:_starsPoolIndex];    }    return nil;}@end	