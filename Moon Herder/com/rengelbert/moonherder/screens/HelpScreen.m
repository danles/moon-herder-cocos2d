////  HelpScreen.m//  MoonHerder////  Created by Roger Engelbert on 10/9/12.//  Copyright Done With Computers 2012. All rights reserved.//	#import "HelpScreen.h"#import "Moon.h"#import "Sun.h"#import "MoonPerch.h"#import "Line.h"#import "PowerBar.h"#import "TimeBar.h"#import "LineContainer.h"#import "Star.h"#import "NumberSprite.h"#import "MoonHerderData.h"#import "MoonHerderGame.h"#import "MoonHerderSounds.h"#import "NSMutableArray+Shuffle.h"/*This screen is similar in many ways to GameScreen.But there is no score, no new level or game over messagesAnd I display the tutorial messages while the game is played*/// HelpScreen implementation@implementation HelpScreen- (void) dealloc {        if (_drawLayer) [_drawLayer release];        [_labels release];        [_lines release];	_lines = nil;	    [_moon release];	[_moonPerch release];	[_powerBar release];	[_timeBar release];	    [_boostHitParticles release];    [_lineHitParticles release];    [_groundHitParticles release];    [_starHitParticles release];        [_particlesLayer release];    	[super dealloc];}-(id) initWithGame:(Game *) game {		self = [super initWithGame:game];		if(self != nil) {		        _moonStartPoint = ccp(60 * game.screen_ratio, game.screenHeight - (60 * game.screen_ratio));        		_startPoint = CGPointZero;        _touchPoint = CGPointZero;                _starsCollected = 0;		_run = NO;		_lines = [[NSMutableArray array] retain];                //load particles        _boostHitParticles = [[CCParticleSystemQuad particleWithFile:@"boost_hit.plist"]retain];        _lineHitParticles = [[CCParticleSystemQuad particleWithFile:@"line_burst.plist"]retain];        _groundHitParticles = [[CCParticleSystemQuad particleWithFile:@"off_screen.plist"]retain];        _starHitParticles = [[CCParticleSystemQuad particleWithFile:@"star_burst.plist"]retain];                [_boostHitParticles stopSystem];        [_lineHitParticles stopSystem];        [_groundHitParticles stopSystem];        [_starHitParticles stopSystem];                _boostHitParticles.scale = _game.screen_ratio;        _lineHitParticles.scale = _game.screen_ratio;        _groundHitParticles.scale = _game.screen_ratio;        _starHitParticles.scale = _game.screen_ratio;                _labelInterval = 40.0;        _labelTimer = 0.0;        	}	return self;}-(void) create {	    if (_container == nil) {                [self initScreen];                _labels = [[[CCLayer alloc] init] retain];                        [_container addChild:_bgDark];        [_container addChild:_sprites];        [_container addChild:_labels];                _label = [CCLabelTTF labelWithString:@"" dimensions:CGSizeMake(260 * _game.screen_ratio, 200 * _game.screen_ratio) alignment:UITextAlignmentCenter fontName:@"TrebuchetMS-Bold" fontSize:16* _game.screen_ratio];                [_label setPosition:ccp(_game.screenWidth * 0.5f, 110 * _game.screen_ratio)];        [_labels addChild:_label];                		[self addMoon];        [self addBars];                //add ground        _ground = [_game.images getSkin:@"ground.png"];        [_ground setAnchorPoint:CGPointZero];        		//the draw layer for lines and bars        _drawLayer = [[[LineContainer alloc] initWithGame:_game withGameScreen:self] retain];                [_container addChild:_drawLayer];                _particlesLayer = [[[CCLayer alloc] init] retain];        [_particlesLayer addChild:_lineHitParticles];        [_particlesLayer addChild:_boostHitParticles];        [_particlesLayer addChild:_starHitParticles];        [_particlesLayer addChild:_groundHitParticles];                [_container addChild: _particlesLayer];                [_sprites addChild:_moon.skin z:Z_MOON];        [_sprites addChild:_ground z:Z_GROUND];	}	    _energyMsgShown = NO;    _timeMsgShown = NO;    _tutorialDone = NO;        //reset moon and perch    [self reset];    [self addStars];            _label.string = @"Draw Lines to Stop Moon\n from Falling to the Ground.\n\n\n Tap Screen to Begin.";        if (!self.parent) [_game addChild:self];    _run = NO;    [_game.sounds play:SOUND_BACKGROUND];    _game.gameData.gameMode = GAME_MODE_PLAY;    }-(void) reset {        //reset bars    [_timeBar reset];    [_powerBar reset];		//reset moon and perch    [_moon placeAtX:_moonStartPoint.x atY:_moonStartPoint.y];    [_moon reset];    _moonPerch.skin.opacity = 50;    	//clear lines    [_drawLayer clear];		//clear all visible stars	[self clearAllStars];	_starsCollected = 0;        _startPoint = CGPointZero;    _touchPoint = CGPointZero;        _starsUpdateIndex = 0;    _starsUpdateRange = 10;    _starsUpdateInterval = 5;    _starsUpdateTimer = 0.0;}-(void) destroy  {    [_game.sounds stopBGMusic];	    [super destroy];}-(void) update:(float) dt {        if (_game.gameData.gameMode == GAME_MODE_PLAY) {							//if running game logic		if (_run) {			            dt *= _gameRate;                        _labelTimer += dt;            if (_labelTimer > _labelInterval) {                _labelTimer = 0;                _label.string = @"";            }				//update elements			[_moon update:dt];					//check collision with lines, update, draw			Line * line;            int len = _lines.count;            int i;            BOOL collisionDetected = NO;						for (i = len-1; i >= 0; i--) {					line = [_lines objectAtIndex:i];                				if (!collisionDetected && line.active) {					if ([line collidesWithBall:_moon]) {						collisionDetected = true;                        [_game.sounds play:SOUND_LINE_HIT];                        [_lineHitParticles setPosition:line.collisionPoint];                        [_lineHitParticles resetSystem];					}				}					if (line.trashMe) {                    [_lines removeObjectAtIndex:i];				} else {                    //[line update:dt];                }			}                        for (i = 0; i < _lines.count; i++) {                line = [_lines objectAtIndex:i];                [line update:dt];            }                        			[_moon place];                        if (_moon.skin.position.y > _game.screenHeight) {                float opacity = fabs((255 * (_moon.skin.position.y - _game.screenHeight))/_game.screenHeight);                if (opacity > 200) opacity = 200;                _bgDark.opacity = 255 - opacity;                            } else {                if (_bgDark.opacity != 255) _bgDark.opacity = 255;            }            							//track collision with MOON and STAR (usign grid logic)            float range = _moon.radius;            float posX = _moon.skin.position.x;            float posY = _moon.skin.position.y;			            [self clearStarAtX:posX atY:posY];            [self clearStarAtX:posX + range atY:posY];            [self clearStarAtX:posX - range atY:posY];            [self clearStarAtX:posX atY:posY + range];            [self clearStarAtX:posX atY:posY - range];            [self clearStarAtX:posX + range atY:posY + range];            [self clearStarAtX:posX + range atY:posY - range];            [self clearStarAtX:posX - range atY:posY - range];            [self clearStarAtX:posX - range atY:posY + range];                        [_timeBar update:dt];            [_powerBar update:dt];                        if ([_timeBar getPercentage] < 0.4 && !_timeMsgShown) {                _label.string = @"Watch out for your Time";                _labelTimer = 0;                _timeMsgShown = YES;            }						//track collision between Moon and Moon's perch			if (_starsCollected == _numStars) {                if (ccpDistance(_moon.skin.position, _moonStartPoint) < _moon.radius) {					[_moon.skin setPosition:_moonStartPoint];                    _moon.vx = _moon.vy = 0;                    _label.string = @"That's it!\n\nTo your Right is the Power Bar.\nAt the bottom your Timer\n\n Tap Screen to Play.";                    [_lines removeAllObjects];                    _labelTimer = 0;                    _tutorialDone = YES;                    _run = NO;				}			}                        if (_moon.skin.position.y < _moon.radius && _moon.active) {                [_groundHitParticles setPosition:_moon.skin.position];                                [_groundHitParticles resetSystem];                [_game.sounds play:SOUND_GROUND_HIT];                [_moon reset];                [_moon placeAtX:_moonStartPoint.x atY:_moonStartPoint.y];                if ((float)rand()/RAND_MAX > 0.5f) {                    _label.string = @"Oops! Try Again. \n\n\n Tap Screen to Begin.";                } else {                   _label.string = @"OOPS. \n\nDraw Lines to Stop Moon\n from Falling to the Ground.\n\n\n Tap Screen to Try Again.";                }                [_lines removeAllObjects];                _labelTimer= 0;                                _run = NO;                            }                        //make stars blink            _starsUpdateTimer += dt;            int stars_count = [MoonHerderScreen stars].count;            if (_starsUpdateTimer > _starsUpdateInterval) {                                if (stars_count - _starsUpdateIndex < _starsUpdateRange) {                    _starsUpdateIndex = 0;                } else if (_starsUpdateIndex + _starsUpdateRange > stars_count - 1) {                    _starsUpdateIndex += stars_count - _starsUpdateIndex - 1;                } else {                    _starsUpdateIndex += _starsUpdateRange;                }                                _starsUpdateTimer = 0;                _starsUpdateInterval = ((float)rand() / RAND_MAX) * 5;            }                        //update stars within update range            Star * star;            for (int i = _starsUpdateIndex; i < _starsUpdateIndex + _starsUpdateRange; i++) {                if (i < stars_count) {                    star = [[MoonHerderScreen stars] objectAtIndex:i];                    if (star.skin.visible && !star.boost) [star update:dt];                }                            }		}	}}-(void) processTouchBegin:(CGPoint) touch {	    if (_run && _game.gameData.gameMode == GAME_MODE_PLAY) {		_startPoint = touch;        _touchPoint = CGPointZero;	}}-(void) processTouchEnd:(CGPoint) touch {        if (!_run) {        if (!_tutorialDone) {            _label.string = @"Collect All Stars.\n\nIf you take too long,\nthe Sun will rise.\nAnd then grow!";            _labelTimer = 0;            _run = YES;        } else {            [_game setScreenWithName:@"GameScreen"];        }    } else {        if (_game.gameData.gameMode == GAME_MODE_PLAY) {                        if ([_lines count] > 10 || [_powerBar getPercentage] <= 0) {                _startPoint = CGPointZero;                _touchPoint = CGPointZero;                return;            }                                                if (!CGPointEqualToPoint(_startPoint, CGPointZero) &&                _startPoint.x != touch.x && _startPoint.y != touch.y) {                                Line * line = (Line *) [_game getObjectFromPoolWithName:POOL_LINES];                                                               [line setValues:_startPoint endPoint:touch];                                if (line.length < 40 * _game.screen_ratio) {                    _startPoint = CGPointZero;                    _touchPoint = CGPointZero;                    return;                }                                [_lines addObject:line];                                if (_powerBar.boosting) {                    _powerBar.boosting = NO;                    _moon.blinking = NO;                    //turn moon ON if we still have power, off if not                    [_moon turnOnOff:([_powerBar getPercentage] > 0)];                }                                //calculate the energy cost of the created line                float cost = line.length * [_game.gameData getFloatValue:LINE_DECREMENT];                               if (_lines.count > 1) cost *= _lines.count;                                                [_powerBar changeBy:-cost];                                if ([_powerBar getPercentage] < 0.6 && !_energyMsgShown) {                    _label.string = @"Watch out for your Energy";                    _labelTimer = 0;                    _energyMsgShown = YES;                }                            }            _touchPoint = CGPointZero;            _startPoint = CGPointZero;                }    }}-(void) processTouchMove:(CGPoint) touch {    if (_run && _game.gameData.gameMode == GAME_MODE_PLAY) {        _touchPoint = touch;    }}-(void) addMoon {       _moonPerch = [[[MoonPerch alloc] initWithGame:_game andPosition:_moonStartPoint] retain];    [_sprites addChild: _moonPerch.skin];           _moon = [[[Moon alloc] initWithGame:_game withRadius:16] retain];}-(void) addStars {            [[MoonHerderScreen gridCells] shuffle];        Star * star;    _numStars = 5;    int numBoosts = 1;        NSValue * value;    int i = 0;    int cnt = 0;    int index;    CGPoint position;        while (cnt < _numStars) {        value = [[MoonHerderScreen gridCells] objectAtIndex:i];        [value getValue:&position];        i++;                index = position.y * _cols + position.x;                position.x = position.x * _tile_size;        position.y = _game.screenHeight - position.y * _tile_size;                //don't use cells too close to moon perch        if (fabs(position.x  - _moonStartPoint.x) < _moon.radius * 2 &&        fabs(position.y - _moonStartPoint.y) < _moon.radius * 2) {            continue;        }                star = (Star *) [_game getObjectFromPoolWithName:POOL_STARS];                if ( cnt >= _numStars - numBoosts) {            [star setValues:position.x                       posY:position.y                      range:_tile_size isBoost:YES];                    } else {            [star setValues:position.x                       posY:position.y                      range:_tile_size isBoost:NO];        }                        [[MoonHerderScreen stars] replaceObjectAtIndex:index withObject:star];        if (!star.skin.parent) [_sprites addChild:star.skin z:Z_STARS];                cnt++;    }}-(void) addBars {        _powerBar = [[[PowerBar alloc] initWithGame:_game withWidth:1 withHeight:_game.screenHeight * 0.8f] retain];    _timeBar = [[[TimeBar alloc] initWithGame:_game withWidth:_game.screenWidth * 0.8f withHeight:1] retain];}-(void) clearStarAtX:(float) x atY:(float) y {	    int col = x / _tile_size;	int row  = (_game.screenHeight - y) / _tile_size;	if (row < 0 || col < 0 || row >= _rows || col >= _cols || [MoonHerderScreen stars].count < row * _cols + col) {		return;	}	//identify cell in array	Star * s = [[MoonHerderScreen stars] objectAtIndex:row * _cols + col];	        if (s.skin != nil && s.skin.visible == YES) {                       float diffx = _moon.skin.position.x - s.skin.position.x;        float diffy = _moon.skin.position.y - s.skin.position.y;                if ((diffx * diffx + diffy * diffy) <= _moon.squaredRadius) {                        s.skin.visible = NO;            _starsCollected++;                        if (s.boost) {                                _powerBar.boosting = true;                _moon.blinking = YES;                [_boostHitParticles setPosition:s.skin.position];                [_boostHitParticles resetSystem];                           }                        if (_starsCollected == _numStars) {                [_game.sounds play:SOUND_LAST_STAR_HIT];                [_starHitParticles setPosition:s.skin.position];                [_starHitParticles resetSystem];                _moonPerch.skin.opacity = 200;                _label.string = @"Return Moon to its Perch.";                _labelTimer = 0;            } else {                if (s.boost) {                    [_game.sounds play:SOUND_BOOST_HIT];                    _label.string = @"This is a Boost.\n It Increases your Energy\n until a new Line is added.";                    _labelTimer = 0;                } else {                    [_game.sounds play:SOUND_STAR_HIT];                }            }        }	}}@end			